//
//  Content+TextOutput.swift
//  swift-gpt
//
//  Created by Huanan on 2025/8/29.
//

// MARK: Content - Text

extension GeneratedContentType {
    /// The content type for text-based responses.
    public static let generatedText = GeneratedContentType(rawValue: "response.message.text")
}

/// Represents text content generated by an LLM.
public struct TextGeneratedContent: Sendable, Codable {
    // TODO: Support content index

    public let type: GeneratedContentType = .generatedText

    /// The partial update for the text content, used in streaming.
    public let delta: String?

    /// The complete text content, available in non-streaming or final stream events.
    public let content: String?

    /// Any annotations associated with the text content.
    public let annotations: [Annotation]

    enum CodingKeys: CodingKey {
        case type
        case delta
        case content
        case annotations
    }

    public init(delta: String?, content: String?, annotations: [Annotation]) {
        self.delta = delta
        self.content = content
        self.annotations = annotations
    }
}

// MARK: Content - Text Annotation

extension GeneratedContentType {
    static let textAnnotation = GeneratedContentType(rawValue: "response.message.text.annotation")
}

extension TextGeneratedContent {
    /// Represents an annotation within a text content block.
    public struct Annotation: Sendable, Codable {
        public let id: String
        public let type: GeneratedContentType = .textAnnotation

        /// The content of the annotation.
        public let content: String?

        enum CodingKeys: CodingKey {
            case id
            case type
            case content
        }

        public init(id: String, content: String?) {
            self.id = id
            self.content = content
        }
    }
}

// MARK: Content - Refusal

extension GeneratedContentType {
    /// The content type for a refusal to answer.
    static let generatedTextRefusal = GeneratedContentType(rawValue: "response.message.text.refusal")
}

/// Represents a refusal from the LLM to provide a response.
public struct TextRefusalGeneratedContent: Sendable, Codable {

    public let type: GeneratedContentType = .generatedTextRefusal

    /// The reason for the refusal.
    public let content: String?

    enum CodingKeys: CodingKey {
        case type
        case content
    }

    public init(content: String?) {
        self.content = content
    }
}
