// MARK: Model Generation

/// A type that represents the content type of a generated item from an LLM.
public struct GeneratedContentType: RawRepresentable, Codable, Hashable, Sendable {

    public let rawValue: String
    
    public init(rawValue: String) {
        self.rawValue = rawValue
    }
}

extension GeneratedContentType: CustomStringConvertible {
    public var description: String {
        rawValue
    }
}

/// A protocol for items generated by an LLM.
public protocol GeneratedItem: Sendable {
    associatedtype Content

    /// The type of the generated content.
    var type: GeneratedContentType { get }
    /// The generated content.
    var content: Content? { get }
}

/// A protocol for generated items that can be sorted by an index.
public protocol GeneratedSortable: Sendable {
    /// The index of the item, used for ordering.
    var index: Int? { get }
}

public typealias GeneratedSortableItem = GeneratedSortable & GeneratedItem

/// A protocol for items that can be partially updated, typically used in streaming responses.
public protocol PartialUpdatable: Sendable {
    associatedtype Delta

    /// The partial update or change.
    var delta: Delta { get }
}

public typealias PartialUpdatableItem = PartialUpdatable & GeneratedItem

// MARK: Model Inputs

/// A type that represents the role of the entity providing input to an LLM (e.g., user, assistant).
public struct ModelInputContentRole: RawRepresentable, Hashable, Codable, Sendable {
    public let rawValue: String
    
    public init(rawValue: String) {
        self.rawValue = rawValue
    }
}

extension ModelInputContentRole: CustomStringConvertible {
    public var description: String {
        rawValue
    }
}

extension ModelInputContentRole {
    /// The system role, providing high-level instructions.
    public static let system = ModelInputContentRole(rawValue: "system")
    /// The assistant role, representing the LLM's responses.
    public static let assistant = ModelInputContentRole(rawValue: "assistant")
    /// The user role, representing the end-user's input.
    public static let user = ModelInputContentRole(rawValue: "user")
    /// The developer role, for developer-specific instructions.
    public static let developer = ModelInputContentRole(rawValue: "developer")
}

/// A type that represents the content type of an input to an LLM.
public struct ModelInputContentType: RawRepresentable, Codable, Hashable, Sendable {
    public let rawValue: String
    
    public init(rawValue: String) {
        self.rawValue = rawValue
    }
}

extension ModelInputContentType: CustomStringConvertible {
    public var description: String {
        rawValue
    }
}

/// A protocol for content provided as input to an LLM.
public protocol ModelInputContent: Sendable {
    associatedtype Content: Encodable

    /// The type of the input content.
    var type: ModelInputContentType { get }
    /// The role of the entity providing the content.
    var role: ModelInputContentRole { get }

    /// The content itself.
    var content: Content { get }
}
